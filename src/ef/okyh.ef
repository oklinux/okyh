引入 用户界面, 工具;
/*################################
#    Oukan OKYH Systm Set Tools
#       sjchnkan @ 2004-2008
#          www.oukan,1m.cn
################################
依赖：
*/


公开 类 启动类
{
	public static main(string[] MLCS)
	{
		如果(用户界面.辅助类.目录是否存在(OKBasicLib.QXTBL("HOME")+"/.OKYH")==假)
			用户界面.辅助类.创建目录(OKBasicLib.QXTBL("HOME")+"/.OKYH",7777);
		文本 QDML=用户界面.辅助类.取当前目录();
		用户界面.辅助类.设置工作目录(OKBasicLib.QXTBL("HOME")+"/.OKYH");

		static string[] QSCS()
		{
			return MLCS;
		}
		string[] SRCS=OKBasicLib.QXTBL("OKYH_CANSHU").分割(" ");
		文本 CS=SRCS[0];
		if(CS  == "tb ")
			SH_CAIDAN.CDCJ();
		又如(CS  == "bf")
			SH_BF.XTBF();
		又如(CS  == "hf")
			SH_BF.XTHF();
		又如(CS  == "hy")
			SH_BF.XTHY();
		又如(CS  == "yhbf")
			SH_BF.YHBF();
		又如(CS  == "yhhf")
			SH_BF.YHHF();
		else if(MLCS[0] == "TB ")
			SH_CAIDAN.CDCJ();
		else if(MLCS[0] == "iso")
		{
			if(SRCS.长度()==2)
				GJ_ISO.CJISO(SRCS[1],"",QDML);
			if(SRCS.长度()==3)
				GJ_ISO.CJISO(SRCS[1],SRCS[2],QDML);
		}
		(创建 窗口应用程序).启动();

	}
}


类 窗口应用程序<基类型 = 界面程序>
{
	okyh窗口 主窗口;
	公开 逻辑 初始化程序()
	{
		主窗口 = 创建 okyh窗口;	
		返回 真;
	}
}


类 okyh窗口 <基类型 = 窗口>
{

	
	面板 ZMB;
	编辑框 TSXX;
	编辑框 XTXX;


	公开 初始化(容器控件 父窗口<可为空> = 空)
	{
		本对象.创建窗口(父窗口);
	}

	私有 创建窗口(容器控件 父窗口<可为空> = 空)
	{
		整数 风格 = 0;
		风格 |= 窗口风格.显示最小化按钮;
		风格 |= 窗口风格.显示关闭按钮;
		风格 |= 窗口风格.显示标题栏;
		风格 |= 窗口风格.显示系统菜单;
		基类.创建(父窗口, "欧侃OKYH OKYHVER", 50, 50, 520, 360, 风格," 主窗口");
		居中(方位.双向);
		显示(真);
	}

	私有 逻辑 创建窗口控件()
	{
		本对象.宽度 = 本对象.取尺寸().宽度 - 本对象.取客户区尺寸().宽度 + 550;
		本对象.高度 = 本对象.取尺寸().高度 - 本对象.取客户区尺寸().高度 + 350;
		ZMB = 创建 用户界面.面板();
		ZMB.创建(本对象);

		菜单条 菜单条 = 创建 菜单条();

		菜单 FILE = 创建 菜单();
		菜单条.添加(FILE, "文件(&F)");
		FILE.添加(101, "退出(&X)\tCtrl-X");

		菜单 SET = 创建 菜单();
		菜单条.添加(SET, "设置(&S)");
		SET.添加(201, "减少自启动的服务(&1)");
		SET.添加(202, "清理随KDE启动的程序(&2)");
		如果(用户界面.辅助类.文件是否存在("/usr/bin/xdg-desktop") == 假)
		{
			SET.添加(203, "开始菜单转换到Gnome(&3)");
			SET.添加(204, "开始菜单转换到KDE(&4)");
		}
		else
			SET.添加(206, "创建新开始菜单项(&3)");
		SET.添加(205, "让浏览器支持RTSP/MMS(&5)");
		SET.添加(207, "KDE自动登录(&7)");
		SET.添加(208, "输入法切换器(&8)");
		SET.添加(209, "设置控制台数（为1）(&9)");
		SET.添加(210, "关闭APCI电源管理(&A)");

		菜单 BACK = 创建 菜单();
		菜单条.添加(BACK, "备份(&B)");
		BACK.添加(301, "备份系统(&1)");
		BACK.添加(302, "恢复系统(&2)");
		BACK.添加(303, "备份WINDOWS(&3)");
		BACK.添加(304, "还原WINDIWS(&4)");
		BACK.添加(305, "备份用户数据(&5)");
		BACK.添加(306, "还原用户数据(&6)");
		BACK.添加(311, "还原随KDE启动的程序(&A)");
		BACK.添加(312, "还原服务到优化前&B)");
		BACK.添加(313, "菜单还原到转换前(&C)");

		菜单 WLSZ = 创建 菜单();
		菜单条.添加(WLSZ, "网络设置(&N)");
		WLSZ.添加(401, "连接DSL(&L)\tF3");
		WLSZ.添加(402, "断开DSL(&D)\tF4");
		WLSZ.添加(403, "新建DSL连接(&X)");
		WLSZ.添加(404, "本地有线网卡配置(&B)");
		WLSZ.添加(405, "共享本机外网连接(&G)");
		WLSZ.添加(406, "设为连接路由器(&K)");
		WLSZ.添加(407, "启用DSL自动连接(&Q)");
		WLSZ.添加(408, "关闭OKLink服务(&J)");

		如果(用户界面.辅助类.文件是否存在("/bin/okwine") == true)
		{
			菜单 WINE = 创建 菜单();
		菜单条.添加(WINE, "Wine设置(&W)");
		WINE.添加(501, "初始化虚拟分区(&C)");
		WINE.添加(502, "更新WINE配置(&P)");
		WINE.添加(504, "注册导入的DLL(&H)");
		WINE.添加(505, "从硬盘导入DLL(&D)");
		WINE.添加(506, "导入系统字体(&Z)");
		WINE.添加(507, "清除WINE配置(&Q)");
		}
		菜单 TOOL = 创建 菜单();
		菜单条.添加(TOOL, "工具(&T)");
		如果(用户界面.辅助类.文件是否存在("/usr/share/okyh/EasyWine.sh") == true)
		{
		TOOL.添加(702, "EasyWine 3.0(&E)");
		}
		//TOOL.添加(704, "股海任我行(&H)");
		
		菜单 BZCD = 创建 菜单();
		菜单条.添加(BZCD, "帮助(&H)");
		BZCD.添加(991, "欧侃在线(&O)");
		BZCD.添加(992, "EasyWine(&E)");
		BZCD.添加(993, "关于OKYH(&A");

		置菜单条(菜单条);

		创建状态条(1, 0);
		置状态文本("作者：陈欧侃   版权所有 @ 2004-2008", 0);

		ZMB = 创建 面板();
		ZMB.创建(本对象, 0, 0, 本对象.宽度(), 本对象.高度()-30, 0, "");

		标签 HUANYING = 创建 标签();
		HUANYING.创建(ZMB, -1, "欢迎您使用\n欧侃OKYH", 3, 3, 200, 80, 0, "");

		字体 标签字体 = HUANYING.字体();
		标签字体.尺寸(26);
		标签字体.名称("楷体_GB2312");
		HUANYING.字体(标签字体);

		颜色 标签颜色 = 创建 颜色();
		//标签颜色.(255);

		// 创建TSXX
		TSXX = 创建 编辑框;
		TSXX.创建(ZMB, -1, "", 200, 3, ZMB.宽度() - 208, 80, (整数)编辑框风格.多行文本|(整数)编辑框风格.文本只读, 空, "");

		字体 ZT_TSXX = TSXX.字体();
		ZT_TSXX.尺寸(16);
		TSXX.字体(ZT_TSXX);	

		编辑框 XTXX = 创建 编辑框;
		XTXX.创建(ZMB, -1, "", 3, 90, ZMB.宽度() - 8, ZMB.高度()-95, (整数)编辑框风格.多行文本|(整数)编辑框风格.文本只读, 空, "");
		颜色 YS_XTXX = 创建 颜色();
		YS_XTXX.蓝(255);
		XTXX.背景色(YS_XTXX);

		SYSINFO();

		如果(用户界面.辅助类.文件是否存在("xxcj.txt") == 真)
			XTXX.载入文件("xxcj.txt");
		else
		{
			字体 ZT_XSXX = XTXX.字体();
			ZT_XSXX.尺寸(28);
			XTXX.字体(ZT_XSXX);	
			XTXX.文本("抱歉！没有获得系统信息");
		}

		返回 真;
	}

	public static SYSINFO(int CS<可为空>=0)
	{
		string SHELL="#!/bin/bash\n";

		SHELL+="echo \"当前系统的内核是：\">xxcj.txt\n";
		SHELL+="uname -a >>xxcj.txt\n";
		SHELL+="    if [ x\"$KDE_FULL_SESSION\" = x\"true\" ]; then DE=kde;\n";
		SHELL+="echo 使用的桌面环境是KDE>>xxcj.txt\n";
		SHELL+="    elif [ x\"$GNOME_DESKTOP_SESSION_ID\" != x\"\" ]; then DE=gnome;\n";
		SHELL+="echo 使用的桌面环境是Gnome>>xxcj.txt\n";
		SHELL+="    elif xprop -root _DT_SAVE_MODE | grep ' = \\\"xfce4\\\"$' >/dev/null 2>&1; then DE=xfce;\n";
		SHELL+="echo 使用的桌面环境是XFce 4 >>xxcj.txt\n";
		SHELL+="    fi\n";

		if(CS==1)
		{
		SHELL+="echo 空间使用情况如下：>>xxcj.txt\n";
		SHELL+="df >>xxcj.txt\n";
		}
		SHELL+="echo 本机PCI设备情况如下：>>xxcj.txt\n";
		SHELL+="/sbin/lspci >>xxcj.txt\n";
		SHELL+="echo 本机USB设备情况如下：>>xxcj.txt\n";
		SHELL+="/sbin/lsusb >>xxcj.txt\n";
		SHELL+="exit 0\n";

 		OKBasicLib.SHELL(SHELL);

	}
	公开 事件处理 逻辑 创建完毕(创建完毕事件 事件)
	{
		创建窗口控件();
		返回(真);
	}

	公开 事件处理 逻辑 窗口被关闭(关闭事件 事件)
	{
		返回(假);
	}

	公开 事件处理 逻辑 菜单被选择(菜单被选择 事件)

	{
		置状态文本("作者：陈欧侃   版权所有 @ 2004-2008", 0);

		如果 (事件.取标识() == 101)
		{
			本对象.关闭(真);
		}
		又如 (事件.取标识() == 207)
		{
			创建 KDEZDDL(本对象);

		}
		又如 (事件.取标识() == 201)
		{
			SH_OKYH.JSFW(0);
			TSXX.添加文本("禁止了除CPUS等五项外的佛服务的自启动！\n");
		}
		又如 (事件.取标识() == 202)
		{
			SH_OKYH.QLKDE(0);
			TSXX.添加文本("完成KDE的清理！\n");
		}
		又如 (事件.取标识() == 203)
		{
			SH_CAIDAN.CDZH("gnome",0);
			TSXX.添加文本("完成CDGNOME相应的操作！\n");
		}
		又如 (事件.取标识() == 204)
		{
			SH_CAIDAN.CDZH("kde",0);
			TSXX.添加文本("完成CDKE相应的操作！\n");
		}
		又如 (事件.取标识() == 205)
		{
			SH_OKYH.LLQ();
			TSXX.添加文本("向基于Gecko核心的浏览器添加MMS、RTSP、ED2K支持！\n");
		}
		又如 (事件.取标识() == 206)
		{
			SH_CAIDAN.CDCJ();
			TSXX.添加文本("完成206相应的操作！\n");
		}
		又如 (事件.取标识() == 208)
		{
			创建 SZ_SRFGL(本对象);

		}
		又如 (事件.取标识() == 209)
		{
			创建 SZ_KZT(1);
			TSXX.添加文本("完成，重起后生效。\n");

		}
		又如 (事件.取标识() == 210)
		{
			SH_OKYH.DYGL(0);
			TSXX.添加文本("完成关闭APCI的设置，重启后生效2！\n");

		}
		又如 (事件.取标识() == 301)
		{
			TSXX.添加文本("开始备份系统，请稍候……\n");
			SH_BF.XTBF();
			TSXX.添加文本("完成整个系统的备份！\n");
		}
		又如 (事件.取标识() == 302)
		{
			TSXX.添加文本("开始恢复系统，请稍候……\n");
			SH_BF.XTHF();
			TSXX.添加文本("完成恢复整个系统！\n");
		}
		又如 (事件.取标识() == 303)
		{
			TSXX.添加文本("开始备份Windows系统，请稍候……\n");
			SH_BF.WINBF();
			TSXX.添加文本("完成整个Windows系统的备份！\n");
		}
		又如 (事件.取标识() == 304)
		{
			TSXX.添加文本("开始还原Windows系统，请稍候……\n");
			SH_BF.WINHF();
			TSXX.添加文本("完成还原Windows整个系统！\n");
		}
		又如 (事件.取标识() == 305)
		{
			TSXX.添加文本("开始备份用户数据，请稍候……\n");
			SH_BF.YHBF();
			TSXX.添加文本("完成备份用户数据！\n");

		}
		又如 (事件.取标识() == 306)
		{
			TSXX.添加文本("开始还原户数据，请稍候……\n");
			SH_BF.YHHF();
			TSXX.添加文本("完成恢复用户数据，45秒后重启桌面！\n");
		}

		又如 (事件.取标识() == 311)
		{
			SH_OKYH.QLKDE(1);
			TSXX.添加文本("完成311相应的操作！\n");
		}
		又如 (事件.取标识() == 312)
		{
			SH_OKYH.JSFW(1);
			TSXX.添加文本("完成312相应的操作！\n");
		}
		又如 (事件.取标识() == 313)
		{
			SH_CAIDAN.CDZH("none",1);
			TSXX.添加文本("完成313相应的操作！\n");
		}
		又如 (事件.取标识() == 401)
		{

			光标 GUANGB = new 用户界面.光标();
			用户界面.辅助类.开始忙碌光标(GUANGB);
			TSXX.添加文本("正开始尝试ADSL连接！……\n");
			SH_NETWORK.ADSL("ljkd");
			TSXX.添加文本("ADSL成功连接！\n");
			用户界面.辅助类.结束忙碌光标();
		}
		又如 (事件.取标识() == 402)
		{
			光标 GUANGB = new 用户界面.光标();
			用户界面.辅助类.开始忙碌光标(GUANGB);
			SH_NETWORK.ADSL("gblj");
			TSXX.添加文本("ADSL已经断开！\n");
			用户界面.辅助类.结束忙碌光标();
		}
		又如 (事件.取标识() == 403)
		{
			创建 SZ_ADSL(本对象);

		}
		又如 (事件.取标识() == 404)
		{
			创建 SZ_ETH(本对象);

		}
		又如 (事件.取标识() == 405)
		{
			SH_NETWORK.ADSL("gx");
			TSXX.添加文本("完成GX相应的操作！\n");
		}
		又如 (事件.取标识() == 406)
		{
			SH_NETWORK.ADSL("gxkh");
			TSXX.添加文本("完成GXKH相应的操作！\n");
		}
		又如 (事件.取标识() == 407)
		{
			SH_NETWORK.ADSL("zd-k");
			TSXX.添加文本("完成407相应的操作！\n");
		}
		又如 (事件.取标识() == 408)
		{
			SH_NETWORK.ADSL("zd-g");
			TSXX.添加文本("完成408相应的操作！\n");
		}
		又如 (事件.取标识() == 501)
		{
			如果(运行环境.启动进程("/bin/okwine cs","iso",真) ==  真);
			TSXX.添加文本("完成501相应的操作！\n");
		}
		又如 (事件.取标识() == 202)
		{
			如果(运行环境.启动进程("/bin/okwine pzwj","iso",真) ==  真);
			TSXX.添加文本("完成502相应的操作！\n");
		}
		又如 (事件.取标识() == 504)
		{
			如果(运行环境.启动进程("/bin/okwine  zc","iso",真) ==  真);
			TSXX.添加文本("完成504相应的操作！\n");
		}
		又如 (事件.取标识() == 505)
		{
			如果(运行环境.启动进程("/bin/okwine  yp","iso",真) ==  真);
			TSXX.添加文本("完成505相应的操作！\n");
		}
		又如 (事件.取标识() == 506)
		{
			如果(运行环境.启动进程("/bin/okwine  zt","iso",真) ==  真);
			TSXX.添加文本("完成506相应的操作！\n");
		}
		又如 (事件.取标识() == 507)
		{
			如果(运行环境.启动进程("/bin/okwine  sc","iso",真) ==  真);
			TSXX.添加文本("完成507相应的操作！\n");
		}
		又如 (事件.取标识() == 702)
		{
			OKBasicLib.SHELL("/usr/share/okyh/EasyWine.sh");
		}
		又如 (事件.取标识() == 704)
		{
			创建 GHSTOCK(本对象);

		}
		又如 (事件.取标识() == 991)
		{
			OKBasicLib.QDLLQ("http://www.oukan.cn.vc");
			返回(真);

		}
		又如 (事件.取标识() == 992)
		{
			OKBasicLib.QDLLQ("http://www.easywine.org");

		}
		又如 (事件.取标识() == 993)
		{
			界面程序.信息框(" 欧侃OKYH集成辅助工具\n OKYHVER\n 陈欧侃 @ 2004-2008\n 邮件：chenkan577@sohu.com  \n 感谢Subbo的贡献");

		}

		返回(真);
	}
}



