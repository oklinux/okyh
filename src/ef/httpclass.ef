引入 apr,工具,编码转换;







接口 进度显示接口
{
	公开 逻辑 HTTP读文件进度显示(整数 总长,整数 已读长度);
}



public class DU_HTTP
{
	公开 静态 字节集 HTTP读文件(文本 URL, 进度显示接口 进度显示)
	{
		内存池 ncc = 创建 内存池();
		
		套接字 s = 创建 套接字();
		套接字地址 dz = 创建 套接字地址();
		
		整数 r = s.创建套接字(地址协议族.Internet网络,套接字类型.流式套接字,套接字协议.TCP协议,ncc);

		URL = URL.删除两端空白();
		文本 主机名 = URL.中间( 7, URL.查找("/",7)-7 );
		文本 文件地址 = URL.右边(URL.长度-7-主机名.长度);
		

		r = dz.创建套接字地址(主机名,地址协议族.Internet网络,80,套接字地址选项.默认,ncc);
		
		r = s.连接(dz);

		文本 发送文本 = "GET " + 文件地址 + " HTTP/1.1\r\n";
		发送文本 += "Accept: */*\r\n";
		发送文本 += "Referer: http://" + 主机名 + "/\r\n";
		发送文本 += "Accept-Language: zh-cn\r\n";
		发送文本 += "Accept-Encoding: gzip, deflate\r\n";
		发送文本 += "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; Foxy/1; .NET CLR 2.0.50727; MAXTHON 2.0)\r\n";
		发送文本 += "Host: " + 主机名 +"\r\n";
		发送文本 += "Connection: Keep-Alive\r\n\r\n";

		字节集 发送文本字节集 = 编码转换.转换(发送文本.到字节集(),编码.UTF_16LE,编码.char);

		s.发送(发送文本字节集);
		
		字节集 返回字节集,buf;
		整数 已读=0,全长=0;

		循环(真)
		{
			buf = s.接收(1024);

			if(全长==0 && 已读==0)
			{
				整数 n=查找字节集( buf,{13,10,13,10});
				字节集 bn1 = buf.左边(n+4);
				buf = buf.右边(buf.长度-n-4);

				文本 str1 = 编码转换.转换(bn1,编码.char,编码.UTF_8).UTF8到文本();
				整数 n1=str1.查找("Content-Length:");
				
				if(n1>0)
				{
					n1+=15;
					文本 str2 = str1.中间(n1,str1.查找("\r\n",n1)-n1);
					str2.删除所有空白();
					全长 = str2.到整数();
				}
				else
					全长=0x7FFFFFFF;

			}

			已读 += buf.长度;
			返回字节集 += buf;

			进度显示.HTTP读文件进度显示(全长,已读);
				
			如果(返回码处理.取返回码()!=返回码.SUCCESS || 已读>=全长)
				跳出;
		}

		返回 返回字节集;
	}

	公开 静态 整数 查找字节集(字节集 源字节集,字节集 关键字)
	{
		计次循环(源字节集.长度-关键字.长度+1,整数 i)
		{
			if(源字节集.取字节(i)==关键字.取字节(0))
			{
				整数 j;
				计次循环(关键字.长度,j)
				{
					if(源字节集.取字节(i+j)!=关键字.取字节(j))
						跳出;
				}
				if(j>=关键字.长度)
					返回 i;
			}
			
		}
		返回 -1;
		
	}
	
	
	
}